#include    <wb.h>


#define wbCheck(stmt) do {                                                    \
        cudaError_t err = stmt;                                               \
        if (err != cudaSuccess) {                                             \
            wbLog(ERROR, "Failed to run stmt ", #stmt);                       \
            wbLog(ERROR, "Got CUDA error ...  ", cudaGetErrorString(err));    \
            return -1;                                                        \
        }                                                                     \
    } while(0)

#define MASK_WIDTH  5
#define MASK_RADIUS MASK_WIDTH/2

#define OUTPUT_TILE_WIDTH 12
#define BLOCK_WIDTH (OUTPUT_TILE_WIDTH + (MASK_WIDTH - 1))

//@@ INSERT CODE HERE

__global__ void imageConvolutionTiled(float* dInput, float* dOutput, 
									  const float* __restrict__ dMask, 
									 int width, int height, int channels, 
									 int maskWidth, int maskRadius)
{
	__shared__ float dsR[BLOCK_WIDTH][BLOCK_WIDTH];
	__shared__ float dsG[BLOCK_WIDTH][BLOCK_WIDTH];
	__shared__ float dsB[BLOCK_WIDTH][BLOCK_WIDTH];
	
	int tx = threadIdx.x;
	int ty = threadIdx.y;
	int outputRow = blockIdx.y * OUTPUT_TILE_WIDTH + ty;
	int outputCol = blockIdx.x * OUTPUT_TILE_WIDTH + tx;
	int inputRow = outputRow - maskRadius;
	int inputCol = outputCol - maskRadius;
	
	if(inputRow >= 0 && inputRow < height && 
	  inputCol >= 0 && inputCol < width)
	{
		dsR[ty][tx] = dInput[(inputRow*width + inputCol)*channels + 0];
		dsG[ty][tx] = dInput[(inputRow*width + inputCol)*channels + 1];
		dsB[ty][tx] = dInput[(inputRow*width + inputCol)*channels + 2];
	}
	else
	{
		dsR[ty][tx] = 0.0f;
		dsG[ty][tx] = 0.0f;
		dsB[ty][tx] = 0.0f;
	}
	__syncthreads();
	
	float outputR = 0.0f;
	float outputG = 0.0f;
	float outputB = 0.0f;
	if(ty < OUTPUT_TILE_WIDTH && tx < OUTPUT_TILE_WIDTH)
	{
		for(int i=0; i<maskWidth; i++)
		{
			for(int j=0; j<maskWidth; j++)
			{
				outputR += dMask[i*maskWidth + j] * dsR[i+ty][j+tx];
				outputG += dMask[i*maskWidth + j] * dsG[i+ty][j+tx];
				outputB += dMask[i*maskWidth + j] * dsB[i+ty][j+tx];
			}
		}
	}
	
	if(outputRow < height && outputCol < width && 
	   tx <= (BLOCK_WIDTH - MASK_WIDTH) && ty <= (BLOCK_WIDTH - MASK_WIDTH))
	{
		dOutput[(outputRow*width + outputCol) * channels + 0] = outputR;
		dOutput[(outputRow*width + outputCol) * channels + 1] = outputG;
		dOutput[(outputRow*width + outputCol) * channels + 2] = outputB;
	}
}

int main(int argc, char* argv[]) {
    wbArg_t args;
    int maskRows;
    int maskColumns;
    int imageChannels;
    int imageWidth;
    int imageHeight;
    char * inputImageFile;
    char * inputMaskFile;
    wbImage_t inputImage;
    wbImage_t outputImage;
    float * hostInputImageData;
    float * hostOutputImageData;
    float * hostMaskData;
    float * deviceInputImageData;
    float * deviceOutputImageData;
    float * deviceMaskData;

    args = wbArg_read(argc, argv); /* parse the input arguments */

    inputImageFile = wbArg_getInputFile(args, 0);
    inputMaskFile = wbArg_getInputFile(args, 1);

    inputImage = wbImport(inputImageFile);
    hostMaskData = (float *) wbImport(inputMaskFile, &maskRows, &maskColumns);

    assert(maskRows == 5); /* mask height is fixed to 5 in this mp */
    assert(maskColumns == 5); /* mask width is fixed to 5 in this mp */

    imageWidth = wbImage_getWidth(inputImage);
    imageHeight = wbImage_getHeight(inputImage);
    imageChannels = wbImage_getChannels(inputImage);
	
	assert(imageChannels == 3);
	
	//wbLog(TRACE, "Width = ", imageWidth, ", Height = ", imageHeight);

    outputImage = wbImage_new(imageWidth, imageHeight, imageChannels);

    hostInputImageData = wbImage_getData(inputImage);
    hostOutputImageData = wbImage_getData(outputImage);

    wbTime_start(GPU, "Doing GPU Computation (memory + compute)");

    wbTime_start(GPU, "Doing GPU memory allocation");
    cudaMalloc((void **) &deviceInputImageData, imageWidth * imageHeight * imageChannels * sizeof(float));
    cudaMalloc((void **) &deviceOutputImageData, imageWidth * imageHeight * imageChannels * sizeof(float));
    cudaMalloc((void **) &deviceMaskData, maskRows * maskColumns * sizeof(float));
    wbTime_stop(GPU, "Doing GPU memory allocation");


    wbTime_start(Copy, "Copying data to the GPU");
    cudaMemcpy(deviceInputImageData,
               hostInputImageData,
               imageWidth * imageHeight * imageChannels * sizeof(float),
               cudaMemcpyHostToDevice);
    cudaMemcpy(deviceMaskData,
               hostMaskData,
               maskRows * maskColumns * sizeof(float),
               cudaMemcpyHostToDevice);
    wbTime_stop(Copy, "Copying data to the GPU");


    wbTime_start(Compute, "Doing the computation on the GPU");
    //@@ INSERT CODE HERE
	dim3 dimBlock(BLOCK_WIDTH, BLOCK_WIDTH, 1);
	dim3 dimGrid((imageWidth-1)/OUTPUT_TILE_WIDTH + 1, (imageHeight-1)/OUTPUT_TILE_WIDTH + 1, 1);
	imageConvolutionTiled<<<dimGrid, dimBlock>>>(deviceInputImageData, deviceOutputImageData, 
												 deviceMaskData, imageWidth, imageHeight, 
												 imageChannels, MASK_WIDTH, MASK_RADIUS);
	cudaThreadSynchronize();
    wbTime_stop(Compute, "Doing the computation on the GPU");


    wbTime_start(Copy, "Copying data from the GPU");
    cudaMemcpy(hostOutputImageData,
               deviceOutputImageData,
               imageWidth * imageHeight * imageChannels * sizeof(float),
               cudaMemcpyDeviceToHost);
    wbTime_stop(Copy, "Copying data from the GPU");

    wbTime_stop(GPU, "Doing GPU Computation (memory + compute)");
	
	//int Row = 0;
	//int Col = 12;
	//int arrLoc = (Row*imageWidth+Col)*3;
	//float* input = hostInputImageData;
	//float* output = hostOutputImageData;
	//wbLog(TRACE, "Location : (", Row, ", ", Col, ")");
	//wbLog(TRACE, "Input : ", input[arrLoc + 0], ", ", input[arrLoc + 0], ", ", input[arrLoc + 0]);
	//wbLog(TRACE, "Output : ", output[arrLoc + 0], ", ", output[arrLoc + 0], ", ", output[arrLoc + 0]);

    wbSolution(args, outputImage);

    cudaFree(deviceInputImageData);
    cudaFree(deviceOutputImageData);
    cudaFree(deviceMaskData);

    free(hostMaskData);
    wbImage_delete(outputImage);
    wbImage_delete(inputImage);

    return 0;
}
