// MP Scan
// Given a list (lst) of length n
// Output its prefix sum = {lst[0], lst[0] + lst[1], lst[0] + lst[1] + ... + lst[n-1]}

#include    <wb.h>

#define BLOCK_SIZE 512 //@@ You can change this
#define MAX_GRID_SIZE 64

#define wbCheck(stmt) do {                                                    \
        cudaError_t err = stmt;                                               \
        if (err != cudaSuccess) {                                             \
            wbLog(ERROR, "Failed to run stmt ", #stmt);                       \
            wbLog(ERROR, "Got CUDA error ...  ", cudaGetErrorString(err));    \
            return -1;                                                        \
        }                                                                     \
    } while(0)
    
__global__ void scan(float * input, float * output, float * partial, int len) {
    //@@ Modify the body of this function to complete the functionality of
    //@@ the scan on the device
    //@@ You may need multiple kernel calls; write your kernels before this
    //@@ function and call them from here
	
	__shared__ float XY[BLOCK_SIZE];
	
	int i = blockIdx.x*blockDim.x + threadIdx.x;
	
	if(i < len)
	{
		XY[threadIdx.x] = input[i];
	}
	else
	{
		XY[threadIdx.x] = 0.0f;
	}
	
	for(int stride=1; stride <= threadIdx.x; stride *= 2)
	{
		__syncthreads();
		float in1 = XY[threadIdx.x - stride];
		__syncthreads();
		XY[threadIdx.x] += in1;
	}
	__syncthreads();
	
	if(i < len)
	{
		output[i] = XY[threadIdx.x];
	}
	
	if(threadIdx.x == blockDim.x-1 && partial)
	{
		partial[blockIdx.x] = XY[threadIdx.x];
	}
}

__global__ void addPartialSum(float* output, float* partialSum, int len) {
	//@@ Add partial sums to the output
	
	int i = blockIdx.x*blockDim.x + threadIdx.x;
	
	if(blockIdx.x > 0)
	{
		if(i < len)
		{
			output[i] += partialSum[blockIdx.x-1];
		}
	}
}

int main(int argc, char ** argv) {
    wbArg_t args;
    float * hostInput; // The input 1D list
    float * hostOutput; // The output list
    float * deviceInput;
    float * deviceOutput;
	float * devicePartialInput;
	float * devicePartialOutput;
    int numElements; // number of elements in the list

    args = wbArg_read(argc, argv);

    wbTime_start(Generic, "Importing data and creating memory on host");
    hostInput = (float *) wbImport(wbArg_getInputFile(args, 0), &numElements);
    hostOutput = (float*) malloc(numElements * sizeof(float));
    wbTime_stop(Generic, "Importing data and creating memory on host");

    wbLog(TRACE, "The number of input elements in the input is ", numElements);

    wbTime_start(GPU, "Allocating GPU memory.");
    wbCheck(cudaMalloc((void**)&deviceInput, numElements*sizeof(float)));
    wbCheck(cudaMalloc((void**)&deviceOutput, numElements*sizeof(float)));
    wbTime_stop(GPU, "Allocating GPU memory.");

    wbTime_start(GPU, "Clearing output memory.");
    wbCheck(cudaMemset(deviceOutput, 0, numElements*sizeof(float)));
    wbTime_stop(GPU, "Clearing output memory.");

    wbTime_start(GPU, "Copying input memory to the GPU.");
    wbCheck(cudaMemcpy(deviceInput, hostInput, numElements*sizeof(float), cudaMemcpyHostToDevice));
    wbTime_stop(GPU, "Copying input memory to the GPU.");

    //@@ Initialize the grid and block dimensions here
	int blockSize = BLOCK_SIZE;
	int gridSize = ((numElements - 1) / blockSize) + 1;
	int outerElements = gridSize; // Partial Sum elements
	int outerBlockSize = BLOCK_SIZE;
	int outerGridSize = ((outerElements - 1) / outerBlockSize) + 1;
	
	//@@ Allocate PartialSum device memory
	wbCheck(cudaMalloc((void**)&devicePartialInput, outerElements*sizeof(float)));
	wbCheck(cudaMalloc((void**)&devicePartialOutput, outerElements*sizeof(float)));

    wbTime_start(Compute, "Performing CUDA computation");
    //@@ Modify this to complete the functionality of the scan
    //@@ on the deivce
	scan<<<gridSize, blockSize>>>(deviceInput, deviceOutput, devicePartialInput, numElements);
    cudaDeviceSynchronize();
	scan<<<outerGridSize, outerBlockSize>>>(devicePartialInput, devicePartialOutput, NULL, outerElements);
	cudaDeviceSynchronize();
	addPartialSum<<<gridSize, blockSize>>>(deviceOutput, devicePartialOutput, numElements);
	cudaDeviceSynchronize();
    wbTime_stop(Compute, "Performing CUDA computation");

    wbTime_start(Copy, "Copying output memory to the CPU");
    wbCheck(cudaMemcpy(hostOutput, deviceOutput, numElements*sizeof(float), cudaMemcpyDeviceToHost));
    wbTime_stop(Copy, "Copying output memory to the CPU");

    wbTime_start(GPU, "Freeing GPU Memory");
    cudaFree(deviceInput);
    cudaFree(deviceOutput);
	cudaFree(devicePartialInput);
	cudaFree(devicePartialOutput);
    wbTime_stop(GPU, "Freeing GPU Memory");

    wbSolution(args, hostOutput, numElements);

    free(hostInput);
    free(hostOutput);

    return 0;
}

